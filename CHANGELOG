# -------------------------------------------------------------------------
                           IP-ARRAY CHANGELOG
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
0.05.75
+ - Added support for the security table.
+ - Added support for the rawpost table (from xtables-addons).
+ -	Added support for the REDIRECT, NETMAP, NFQUEUE, CLASSIFY, CONNSECMARK, DSCP, ECN, NFLOG, ULOG, SET, TCPOPTSTRIP targets.
+ -	Added support for the TOS target (--and|or|xor-tos and masking is also supported).
+ -	Added support for the CONNMARK target. Mark parameters can be specified in one of the following ways (to reflect all available options from iptables 1.4.5):
	(save|restore):[mark|nfmask][/mask] , (set|xset):mark[/mask] , (and|or|xor):mark
+ -	Added support for the SECMARK target (no checking for valid SElinux context strings is performed).
+ - Added support for the RAWDNAT and RAWSNAT targets (from xtables-addons).
+ -	Added support for the TPROXY target (no DIVERT chain, or iproute rules are created).
+ -	Added support for the helper, mark, comment, connbytes, connlimit, connmark, owner, set, ttl, pkttype, socket, ah, esp, dscp, length, match extensions.
+ -	Added support for the addrtype match extension. --limit-iface-{in|out} is not supported.
+ - Added support for the DNAT/SNAT options 'random' and 'persistent'.
+ - Added support for the 'random' option for the MASQUERADE and REDIRECT targets.
+ - 'tos' match values now support negation and masking.
* -	Incorporated the use of the 'TTL' target into the templates and ruleblocks system.
* -	Incorporated the use of the 'TCPMSS' target into the templates and ruleblocks system. '--set-mss' is now also supported.
* -	Incorporated the fragment (-f) option into the templates and ruleblocks system.
* - The log options 'log_tcp_sequence', 'log_tcp_options', 'log_ip_options' and 'log_uid' in a template, can now be configured via the 'log_options' option.
	Which contains a comma separated list of parameters. Allowed values are: 'log_tcp_seq', 'log_tcp_opt', 'log_ip_opt' and 'log_uid'.
+ - Added the ability to use 'goto:' as prefix for a target, to override the default jump behaviour.
+ - Added support for non CIDR netmasks in ipv4 address descriptors.
+ - Added the ability to define multiple (source,destination) ports in rules as comma separated values.
	If the multiport module is loaded, the multiport match extension is used. Otherwise a rule for every port is created.
	If the multiport module is not available, source or destination ports will be multiplied.
+ - Added the ability to define multiple protocol types (as comma separated values) in one rule line.
+ - Added the ability to define multiple interfaces (as comma separated values), in one rule line.
	Either input or output interface, not both, may be specified.
* - Changed the procedure of multiplying rules. It is now done before processing (filling RULELIST arrays),
	which allows to multplicate option values, that are referenced later (i.e. protocol).
	Also it allows to multiply the rules more than once. For example:
	A rule line may contain two interfaces defined as 'eth0,eth1' and protocols defined as 'tcp,udp', which will produce two rules
	for the interfaces and for each interface a rule with one of the protocols. So by writing one line, four rules will be generated.
	If, for example, two targets 'LOG,DROP' are specified, the result would be eight generated rules.
	Let's say the multiport module is not available and the rule also contains a multi destination port definition of '53,88,563',
	then we end up with 24 computed rules. In case the template has 'reverse_mode' set to 'reverse' and we use i.e INPUT and OUTPUT chain
	(for i.e a local service) the result is 48 rules (of course reverse is only needed, if no established traffic accept rule exists in the reverse direction).
+ - Added the ability to use network names (those defined in 'NET_INTERFACES') as source, or destination address option in rules.
+ - In ruleblock rules, if icmp is specified as protocol, 'icmp_type' can be set in source or destination port fields,
	without declaring the column as 'icmp_type' in the according template.
+ - Added a new folder to the config directory named 'ruleblocks.d'. This is the place to put the rule definitions (ruleblocks).
	It contains the predefined and mandatory ruleblock files. There is a ruleblock file for each iptables table (filter, mangle,
	nat, raw and security). These files may be empty, but a predefined structure is required, otherwise IP-Array would not know which ruleblocks it must load.
	Additionally there is a file called 'tc_mangle_rules.xml' containing the mangle table rules, which should be loaded, when applying traffic shaping.
	This is required, as IP-Array needs to know which mangle table rules to use, if traffic shaping is enabled.
	A variable for the directory and for each of the files has been added to the main config file.
+ - Added new folder in config directory named 'templates.d'.  This is the place to put the rule templates.
	It contains the predefined and mandatory template files. 'BASE_TEMPLATES' defines a set of generic templates,
	which may be loaded into any other template.  There are template files for each iptables table (filter, mangle, nat, raw, rawpost and security).
	These files may be empty, but a predefined structure is required, otherwise IP-Array would not know which templates it must load.
	A variable for the base and each table template has been added to the main config file.
	This makes the template based rule definition feature, introduced with the release of IP-Array 0.05.74, available to the user.
+ - The iptables table can now also be specified as ruleblock option. Before the definition was only possible in the template.
+ - Added the ability to load (nest) other templates within a template. Multi-level nesting is also supported.
+ - Templates, ruleblocks and rule files are now defined in simple XML. The XML structured data is parsed into bash scripts at runtime.
	Once parsed, the bash scripts are loaded each time IP-Array is called. Command line options have been added to (re)-parse the XML data.
+ - Added the ability to define 'always use' rule options, within a template, which should always be set to default values.  This could be useful,
	when creating templates for scenarious with certain fixed parameters.
+ - Added more sanity checks for rule template configuration.
+ -	Added startup parameter 'parse-xml'. Which is used to read all the XML data (templates, ruleblocks, rule files) and compile bash scripts
	out of them. Startup options '-pb', '-pr', '-pt' may be used to selectively parse only specific type(s).
+ -	Added startup parameter 'compat-check'. Which is used to perform a compatibility check.
+ -	Added startup option '-p'. Which is used to re-parse all XML data.
+ -	Added startup option '-pb'. Which is used to re-parse XML ruleblock data.
+ -	Added startup option '-pr'. Which is used to re-parse XML rule file data.
+ -	Added startup option '-pt'. Which is used to re-parse XML template data.
+ -	Added the ability to use 'public functions' in rule files. This allows the user to i.e. place messages of the desired kind anywhere
	in the rule file using the 'log()' function. Or allows to call any of the automatic rule creation functions exactly at the desired point.
	Sub options to the 'help' startup parameter have been added, to list the public functions with a short description, or show a more detailed
	description of a specific public function. i.e.
	./ip-array -h --public-functions - shows a list of public functions with a short description.
	./ip-array -h --public-functions log - shows more detailed usage instructions of the 'log()' function.
+ - Added the ability to define 'quick-rules' in rule files. Means no template needs to be configured. Option names are equal to the names used in templates.
	Example: <quickrule> table=filter chain=INPUT idev=eth0 proto=tcp dport=22 state=NEW target=ACCEPT </quickrule>.
+ - Added the ability to use 'inline public functions' within ruleblocks. Two functions are available for inline use: 'add_rule' and 'create_chain'.
	This allows to add rules within a ruleblock, whose template does not fit your needs and you need to quickly add a rule with different options,
	as the template of the ruleblock allows.
+ - Added config options 'ENABLE_FILTER', 'ENABLE_MANGLE', 'ENABLE_NAT', 'ENABLE_RAW' and 'ENABLE_SECURITY'. They allow to selectivly turn filter, mangle, nat,
	raw and/or security table rules on or off. For each of those settings there is an additional variable describing the files holding the rules.
	They are required for IP-Array to know, when to load which rules.
+ - Added the ability to put user defined chains, as targets or target chains, into rules (rules defined in ruleblocks).
+ - Added the possibility to add rules with no target set, by specifying the target with 'empty'.
+ - Spaces in ruleblocks and quick-rules are now supported for the 'log_prefix' and 'comment' options.
	They must be quoted with single quotes or backslash escaped double quotes.
+ - LOG/ULOG/NFLOG prefixes now get a space appended to the end of the string.
+ - Added startup parameter 'save-known-good'. The iptables ruleset saved by that command will be loaded, if 'RESTORE_ON_START' is '1'.
+ - Added startup parameter 'save-modprobe-commands', which saves the generated modprobe commands to a file.
	When saving all commands, modprobe commands are included.
+ - Added startup parameter 'save-proc-commands', which saves the generated /proc commands to a file. When saving all commands, /proc commands are included.
+ - Added startup parameter 'save-shaping-commands', which saves the generated tc and iptables mark commands to a file.
+ - Added startup parameter 'diff-last-activated', which compares the output of `iptables -nL' to a rule listing, saved to a file on last
	run of IP-Array, which did apply iptables commands. In the defaults file, there now is a variable named 'DIFF_FILE',
	to configure the file, where the rule listing is saved into.
+ - Added startup parameter  'prepare-restore-on-start'.  This will generate separate 'KNOWN_GOOD' modprobe, /proc and tc scripts
	and will either save the iptables ruleset with iptables-save, or save the iptables commands like loading IP-Array with the
	'save-iptables-commands' parameter. The second case applies, if the new config variable 'IPTSAVE_FAILS' is enabled.
	Those files will be loaded on 'start', if 'RESTORE_ON_START' is enabled. This allows to quickly (re)activate the system state.
	The file names can be configured in the defaults file using these new variables: 'KNOWN_GOOD_RULES', 'KNOWN_GOOD_MODPROBES',
	'KNOWN_GOOD_PROC_SET' and 'KNOWN_GOOD_TRAFFIC_CONTROL'.
+ - Added startup option '-c'. This allows to specify the main config file on the command line.
+ - Added startup option '-d'. This allows to specify the defaults config file on the command line.
+ - Added startup option '-b'. This allows to specify the base directory (variable 'BASE_DIR') on the command line.
+ - Added startup option '-e'. This allows to specify the executable base directory (variable 'BIN_DIR') on the command line.
+ - Added startup option '-l'. This allows to specify the library directory (variable 'LIB_DIR') on the command line.
+ - Added startup option '-o'. This allows to override configuration options from the main config file on the command line. Can be used multiple times.
+ - Added startup option '-s'. This allows to specify a file on the command line, when saving/restoring/comparing rules with 'save',
	'save-commands', 'save-iptables_commands', 'save-modprobe-commands', 'save-proc-commands', 'save-tc-commands', 'save-shaping-commands',
	'diff-last-activated', or 'restore'.
+ - Added startup option '-dr'. Like the 'dry-run' parameter, generated commands are not applied (no-acting mode).
+ - Added startup option '-sh'. This allows to select the shell (bash) to run IP-Array from.
+ - Added startup option '-t'. This allows to schedule the restore of the currently active ruleset.
+ - Added startup option '-rt'. This allows to specify the 'RELOAD_TIME' on the command line. Only valid with the 'test' parameter.
+ - Added startup option '-v'. Which allows to specify the level of verbosity on the command line.
+ - Added startup option '-sv'. Which allows to specify the level of syslog verbosity on the command line.
+ - Added many System Control (/proc) settings. About 80+ /proc configuration options are available.
	The code handling the /proc settings moved into one generic function.
+ - Added config option 'IPSEC_RULES'. It is needed for IP-Array to know which rules to load, when ipsec is enabled.
+ - Added config option 'EXIT_ON_ERROR'. If enabled, IP-Array will exit in case a configuration, or command apply
	(iptables, proc, tc, inline-command, misc...) error is detected.
+ - Added config option 'JUMP_TREE'. If the option is undefined or set to 'none', classification is disabled. Otherwise, these parameters are available:
	'interface': traffic is categorized by interface names.
	'netname': traffic is categorized by network names (IP addresses as matches).
	'netname+interface': traffic is categorized by network names (IP addresses and interfaces as matches), but if an interface is bound to multiple networks,
	interface classification is used to seed out by interface and from there jump by network names.
	Jump tree creation is avalailable for all tables including the 'rawpost' and 'security' table.
+ - Added autosave and restore logic. If the 'restart', 'tc-start', or 'open' startup parameter is used and IP-Array exits on error,
	an automatically saved ruleset will be loaded with iptables-restore. This behaviour is disabled, if 'IPTSAVE_FAILS' is enabled in the defaults file.
+ - Added startup option '-na', which allows to disable the autosave and restore logic described above.
	This could be useful, if iptables-save or iptables-restore do not correctly save or restore the ruleset.
+ - Added startup option '-nc'. If used, no checks for iptables targets and extensions are performed. Instead their presence is assumed.
+ - Added startup option '-nd'. If used, no diff file is saved for later difference checks using the 'diff-last-activated' parameter.
+ - Added startup option '-ni'. If used, no checks for existence of interfaces are performed.
+ - Added startup option '-nm'. If used, no module loading and removing is performed.
+ - Added startup option '-np'. If used, no system configuration on the /proc filesystem is performed.
+ - Added startup option '-ns'. It allows to turn off processing of prolog/epilog scripts.
+ - Added startup parameter 'show' and startup option '-sc' to show a configuration summary. '-sc' selects the type of configuration to show.
	Available arguments to that option are: 'main' (which is the default, if unset), 'defaults', 'targets', 'matches' (the last two show which are supported
	by IP-Array), 'ruleblocks', 'templates' and 'all'.  Multiple use of this option is supported.
+ - Added logic to restore the initial module state (loaded or unloaded), if IP-Array exits on error.
	This applies, if the 'restart', 'tc-start', 'test' or 'open' startup parameter is used.
+ - Added logic to restore the initial /proc configuration state, if IP-Array exits on error. This applies, if the 'restart',
	'tc-start', 'test' or 'open' startup parameter is used.
+ - Added config option 'ADMIN_CONNECTION'. If starting with 'start', or lockdown, or an exit condition is reached (as described below),
	IP-Array will use these values (if the 'SSH_CONNECTION' variable is not set) to allow a remote administrative connection.
	If the 'SSH_CONNECTION' variable is set, the 'ADMIN_CONNECTION' variable will be ignored.
+ - Added iptables command apply error handling.  If a generated iptables command returns an error, and if 'EXIT_ON_ERROR' is enabled,
	tables are flushed, DROP policies are set in filter table chains and (if set) admin connection is allowed.
	Depending to the startup mode and if startup option '-na' is set, a previously saved ruleset may be restored afterwards.
+ - Added the new configuration variable 'CHAIN_MAP'. This supersedes the 'CHAINLIST' variable.
	With 'CHAIN_MAP' it's now possible to define the table in which the chain should be created.
+ - Added the new configuration variable 'SCRIPT_MAP'. This option supersedes the 'PROLOG_SCRIPT' and 'EPILOG_SCRIPTS' variables.
	With 'SCRIPT_MAP' it is possible to define prolog and epilog scripts for each of the startup parameters of IP-Array.
	Except those, which just save or restore the ruleset with iptables-save or iptables-restore.
	Example:
	'start,restart epilog start_epilog_script_1 start_eplilog_script_2'
	'stop prolog stopping_prolog_script'
	The first line will load two epilog scripts, if either 'start' or 'restart' has been used as startup parameter.
	The second line will load a prolog script, if using the 'stop' parameter when calling IP-Array.
+ - Added the configuration variable 'KNOWN_TRAFFIC_MAP', which allows to generate ACCEPT rules with certain states
	(ESTABLISHED, RELATED, ESTABLISHED and RELATED) for certain chains, which can either be placed on top or on the bottom of the defined chain.
+ - Added the configuration variable 'FINAL_RULE_MAP', which supersedes the 'FINAL_RULE' variable. Whith 'FINAL_RULE_MAP' it's now possible to
	define final actions for chains in the filter tables. Available actions are: log, drop, reject, logdrop, logreject.
	The following log parameters can be specified: limit, limit-burst, loglevel. If they are undefined, the global log parameters are used.
	For log prefixes, the final target is included in the prefix string.
	For builtin chains the policy is queried and eventually shadowed drop rules are not applied.
+ - Added the new configuration option 'SYSLOG_VERBOSE' to the 'defaults.conf' file.
	Which allows to set the verbosity of syslog logging (if enabled). Allowed range is 0-6.
+ - Added syntax checking on files which get sourced or executed. This is done by `bash -n'. Therefor it is just simple bash grammar
	checking. It can be turned on or off in the configuration area of the init script, by setting the 'SYNTAX_CHECK' variable.
+ - Added the new configuration option 'LIB_DIR' to the defaults file. The IP-Array function files are put there.
+ - IP-Array can now generate the iptables ruleset in 'iptables-save' format. Setting of counters is not supported.
+ - Added startup option '-gf'. It allows to specify if the iptables commands should be generated as command list, or in 'iptables-save' format.
+ - Added startup option '-ct'. It allows to save/restore the counters when using the 'save' or 'restore' argument.
+ - Added checking for duplicate values in configuration entries (i.e. multiple use of an option in a rule template).
+ - If the variable 'DEBUG_INFO' is set in the shell environment, IP-Array will display some additional debugging info.
+ - Added long style startup options (--option-xyz).
+ - Added simple generic install.sh.
* - Changed startup logic. Now in any startup mode, rules get generated and saved into arrays to be applied at once. In 'START' mode tables are flushed,
	DROP policies are set in filter table chains and, if set, admin connection is allowed until collected rules get applied.
* - Changed file namings. All bash config files now have the suffix '.conf'. All XML files have the suffix '.xml'.
	The main config file was renamed from 'fw.cfg' to 'ip-array.conf'. The defaults config file was renamed from 'parameters' to 'defaults.conf'.
* - Removed 'local.conf'. Its variables are now in the main configuration file.
* - Generated iptables rules now use extrapositioned negation.
* - MARK values can now be defined in these different ways: [set:|xset:]value[/mask], and|or|xor:value.
	Thus 'MARK' target rules using the '--set-xmark', '--and-mark', '--or-mark' and '--xor-mark' can now be generated.
* - In interface classified chains (i.e. INPUT_eth0) device specifications are no more used in rules placed into them,
	because the chain already determinates that.
* - Modified the structure of 'NET_INTERFACES'. It now allows to specify which interface (physical) is ipsec enabled.
* - Automatic FTP rule generation changed to now use the 'helper' module.
	The 'LAN_FTP_INTERFACES' variable can now be configured to allow either active, passive or both ftp modes.
* - Automatically generated nameserver rules in 'intns_to_extns()' are now placed into their own chain 'NAMESERVERS'.
* - Automatically generated nameserver rules in 'allow_out_dns()' are now placed into their own chain 'LOCAL_NAMESERVERS'.
* - Automatically generated smtp server rules in 'lan_isp_smtp()' are now placed into their own chain 'ISP_SMTP_SERVERS'.
* - Automatically generated ntp server rules in 'allow_out_ntp()' are now placed into their own chain 'NTP_SERVERS'.
* - In the four above listed functions, if the external network is not specified,
	for each ip-address entry a query for the interface to route them over is performed.
* - Automatically generated broadcast drop rules for 'DROP_DHCP' and 'DROP_UPNP' are now placed in their own chain 'GLOBAL_BROADCASTS'.
* - If 'LOG_INVALID' and 'BLOCK_INVALID' are enabled, packets in an invalid state are put into a seperate chain handling them,
	otherwhise just a single rule is created.
* - For nameserver handling in 'intns_to_extns()' and 'allow_out_dns()' tcp protocol is now also used.
* - When saving iptables or tc commands, a function to flush/delete the iptables chains, or respectively delete the qudisc, gets written to the
	file. Previously the deletion commands for currently present chains/qdiscs were saved, which could lead to commands failing,
	if the scripts get loaded on different system states.
* - Configuration variable 'VERBOSE' now can be between '0' and '9'. '0' means no output - exit status indicates success or failure.
* - Configuration variable 'SYSLOG_VERBOSE' now can be between '0' and '6'. '0' means minimal output - '7' shows IP-Array internals.
* - Definitions of programs used in IP-Array moved to the defaults file.
* - IP-Array output (console and syslog) configuration options moved to the defaults file.
* - When running in any of these modes: DRY-RUN, SAVE-COMMANDS, SAVE-IPT-COMMANDS, SAVE-MODPROBE-COMMANDS, SAVE-PROC-COMMANDS, 
	SAVE-SHAPING-COMMANDS or SAVE-TC-COMMANDS, modules are not loaded/removed. Instead the probing is done with 'modprobe -n'. 
* - Almost all automatic iptables rule creation functions now internaly use the template/ruleblock system.
* - New init script. Most tasks previously done by the init script, are new done by the main program.
* - Various minor improvements and changes.
- - Removed config options 'RULES_CONFIG', 'RULELIST',  'CHAINLIST', 'PROLOG_SCRIPTS', 'EPILOG_SCRIPTS', 'IPSEC_INTERFACES', 'ALLOW_LAN_FTP',
	'ALLOW_ACTIVE_FTP', 'ALLOW_PASSIVE_FTP', 'ACTIVE_FTP_INTERFACES', 'PASSIVE_FTP_INTERFACES', 'ENABLE_SET_TTL_NETS', 'ALLOW_RMP',
	'ALLOW_WMP', 'ROOT_DNS', 'TCPMSS_TO_MTU' from the main config file.
- - Removed config options 'SAVE_DIR', 'CFG_DIR', 'MAIN_SCRIPT' from the defaults file.
- - Removed config option 'RMMOD' from the IP-Array programs list.

# -------------------------------------------------------------------------
0.05.74d
! - Bugfix: Prolog scripts were not loaded at all.
! - Bugfix: raw table rules did not have the target appended to the command
	string (applies only, if the user configured his own raw table template).
! - Fixed a bug in logic for 'FINAL_RULE'. If 'FINAL_RULE' was set to either
	IPBOUND or IFBOUND, unnecessary (shadowed) allow rules will be generated.

# -------------------------------------------------------------------------
0.05.74c
! - Fixed a bug in 'get_if_data()'. If the broadcast address of an
	interface ip was not set, collected interface data will not be correct.
	Thus functions relying on the collected data would fail.
! - Fixed a bug in 'get_if_data()'. Only the first line of the iproute
	output will be processed, thus interface aliases (i.e. eth1:0) would
	not be processed. Leading to some automatically generated rules not to
	be generated. This error was built in with version 0.05.74.
! - Fixed a bug in 'validate_option_values()'. As not using the
	'${!array[@]}' style syntax to cycle through the positinal params
	array, some option values may not be validated, if the array
	contains unset indicies.
! - Fixed a minor bug in the init file, where the allowed range for
	'VERBOSE' was set to '0-5' instead of '0-6'.

# -------------------------------------------------------------------------
0.05.74b
! - Fixed a bug in 'lan_isp_smtp()', where if an invalid entry was placed
	into 'ISP_SMTP' by the user, all following entries would be ignored.
	Thus some rules may not be generated.
! - Fixed a minor bug in 'allow_out_dns()', 'allow_out_ntp()' and
	'set_global_policies()', where i had changed variable names, but did
	not update them, when calling 'cfg_err()'. Thus the error message
	containing the data of the error will not be displayed.

# -------------------------------------------------------------------------
0.05.74a
! - Fixed a bug in 'intns_to_extns()'. If '"AUTO_PROV_DNS' was '0',
	the automaticaly generated root nameserver rules, were not created.

# -------------------------------------------------------------------------
0.05.74
+ - Vast parts of IP-Array have been rewritten, adapted or corrected.
	There are too many changes to list them all in detail.
	In general this version of IP-Array should run faster and more stable.
	A list of major changes is found below.
+ - IP-Arrays iptables rule handling has been completely rewritten.
	The definition of rule blocks (rule holding variables) is now template
	based. The 'validate_rule()' and sub functions have been replaced by
	'process_ipt_ruleblock()' and sub functions. Functionality of functions
	previously calling 'validate_rule()' is now integrated into the more
	generic 'process_ipt_ruleblock()' function.
	The template based method allows a very flexible custom configuration
	of rule blocks with any option known to IP-Array. In other words,
	users are able to define their own rule blocks and the options used
	in it. The ability to define (multiple) targets and chains in a rule
	block line has been added.
	No documentation is done for this feature yet.
	This release of IP-Array reflects the functionality of the previous
	release (with a new core). The template method meanwhile is transparent
	to the user. This will change in upcoming releases.
	NO configuration changes are necessary.
+ - Added checking for supported versions of bash (3.0+).
+ - Added bash version depending functions. For bash version below 3.1
	the 'string_tolower()' and 'string_toupper()' functions are used
	in cases, where case matching is not needed. For bash version equal or
	higher to 3.1 the 'nocasematch' option of bash is used.
+ - Added support for the iptables 'raw' table.
+ - Added simple INT,ERR,HUP traps.
* - Changed the module un/loading process. When unloading, modules are
	removed in the reverse order of the loading process.
* - Changed behaviour of startup parameter 'save-tc-commands'. Now
	also iptables mangle table commands are saved.
* - Adapted many rule block variables to allow more loose rules.
	For details please refer to the option description of each rule block.
* - Changed tc related startup modes to also (re)load the TTL marks.
* - Removed any use of awk and sed in the code of IP-Array.
	Now everything is done with bash functions.
! - Fixed a major bug, where IP-Array was exiting on error, if the module
	'ip_tables' was not loaded.
! - Fixed a bug in 'apply_final_rule()', where, if policy was set to ACCEPT
	and 'FINAL_RULE' was either 'drop' or 'logdrop', necessary OUTPUT rules
	were not created, hence necessary traffic was blocked.
! - Fixed a bug where rule options defined as mandatory, could be set as
	rule separator.
! - Fixed copy & paste errors in 'vpn_input_allow()' and 'intns_to_extns()'.
! - Fixed a copy & paste error in 'IPARRAY_PROGRAMS', where 'date' had the
	definitions of 'grep'.

# -------------------------------------------------------------------------
0.05.72
+ - Added function 'color_msg()' to display coloured messages.
+ - Added the configuration options to allow the user to define the colours
    used for main-title, subtitle, info-title, notice, warning and error
    messages.
+ - Added function 'precheck_config()', to validate configuration entries
    before any action is performed.
+ - Added limit / burst options to all filter table rules.
+ - Added options 'IFBOUND' and 'IPBOUND' to 'RESTRICT_OUTPUT' config option,
    which create either interface, or IP address bound rules.
+ - Added interface classifying chains for mangle table.
+ - Added support for non case-sensitive configuration values at places
    where it makes sense and the called program supports them.
+ - Added cburst and mtu options to tc class routines.
+ - Added startup parameter 'save-tc-commands' to save tc commands to file.
+ - Added startup parameter 'save-iptables-commands' to save the iptables
    commands to file.
+ - Added startup parameter 'dry-run', which runs IP-Array without executing
    any resulting command.
+ - Added saving of sysctl settings commands.
+ - Added error counter for sysctl commands.
* - Changed startup parameter 'save-commands' to save all commands, including
    iptables, tc and sysctl settings.
* - Made LAN DNS preset work for all local networks including dmz networks,
    which were missing previously.
* - Adapted 'end_msg()' to display different status message according to
    runmode.
* - Commands for sysctl settings are now also cached into an array like
    iptables and tc commands.
* - Rewrote function 'flushdel_tables()', which is now more generic.
* - Rewrote function 'validate_rule()'. Parameter validations are now in
    separate sub functions. All global rule handling variables are now of
    local type.
* - Comments inside rule variables (arrays) can now be placed on the
    same line as the rule, not only on separate lines like before.
* - Changed IP-Array structure:
    Main script is now executable in 'BIN_DIR/{stable,test}'.
* - Changed the look of the init script 'usage()' output.
* - Major optimizations in the init script.
* - More detailed (error)log output in some functions.
* - Various code optimizations.
! - Fixed a bug in 'reqparm()', where the function only returned
    on error, instead of reporting a missing parameter.
! - Minor bugfixes concerning wrong log output.
- - Removed options '-p, -q, -z' from 'log()' function.
- - Removed config option 'SET_TTL', as its functionality is given by
    'ENABLE_TTL_NETS'.


# -------------------------------------------------------------------------
0.05.71
! - Fixed a bug in 'enable_vpn()', where the 'none' and 'log' options
    were missing for the 'FINAL_RULE' variable.
! - Fixed a bug happening with parameter 'tc-start', where TOS rules were
    not applied, as the checking for the iptables modules never happend.
! - Fixed a minor bug, where the global log-prefix was still hardcoded
    in the bad packets rules.
+ - Added state match extension configuration value to all imcp rules.
+ - Added function 'syslog()' and configuration option 'LOG_FACILITY'.
    Syslog logging is now done using an user definable facility and the
    following syslog priority names: info, notice, warning and err.
+ - Added functionality to selectively enable or disable each ruleset
    from rules configuration file.
+ - Added startup parameter 'save-commands', which saves the resulting
    iptables commands to a file. Through this IP-Array can be used to
    generate firewall scripts for other hosts. This maybe useful if
    another host is even missing the most mandatory programs like
    awk, grep, sed, etc.
+ - Added startup parameter 'lockdown', which is used to quickly disable
    all network traffic.
+ - Added function 'val_loglevel()' to validate syslog loglevel entries.
+ - Renamed function 'set_policy()' to 'set_global_policies()'.
    Added function 'set_policy()' to set iptables policy rules.
+ - Added checking for oversized log-prefix values.
+ - Added 'VERBOSE' level '6'. Even more verbose output with 'set -v'.
+ - Added unloading of iptables modules for start, stop, restart and
    test mode.
* - Rewrote checking for unneeded OUTPUT rules.
    If either policy in OUTPUT chain is ACCEPT or 'RESTRICT_OUTPUT' is 0,
    automatically generated OUTPUT rules will not be applied, as they
    are unnecesarry. For manually configured OUTPUT rules, a message is
    displayed to disable the ruleset.
* - More detailed output and error handling of some functions. Minor
    changes to the look of the output.
* - Minor optimizations.

# -------------------------------------------------------------------------
0.05.70
! - Fixed a bug added in version 0.05.68, where the rule separator for
    the logging options was still hardcoded.
! - Fixed a bug in 'val_mac()', where the regex was not specific enough.
    Rewrote whole function, which should also speed up processing.
! - Fixed a bug in logging rules, where, incase limit and burst options
    are placeholders, the resulting iptables command will use limit 
    without any options.
+ - Added checking for the following targets: ACCEPT, DROP, LOG, REJECT,
    DNAT, SNAT, MARK.
+ - Added checking for the following match extensions: tcp, mac, limit,
    tos.
+ - Added LAN to LAN rule variable. This is to create bidirectional rules
    between local area networks.
+ - Added DMZ to LAN rule variable. This is to create bidirectional rules
    between DMZ networks and local area networks.
+ - Added jump entries for INPUT and OUTPUT chain classified by interface,
    just like it is done for the FORWARD chain before.
+ - Added config option 'FINAL_RULE' with five new possible values:
    none, drop, log, logdrop, limbo. This controls the termination of
    chains with a final rule. Overtaking functionality from the removed
    config options 'USE_LIMBO' and 'LOG_NOT_MATCHED'.
+ - Added configuration option 'ALLOW_LOOPBACK'.
- - Egrep is no longer used.
- - Removed function 'validate_interfaces()'.
- - Removed 'INTERFACES' variable (config/local).
- - Removed config options 'USE_LIMBO' and 'LOG_NOT_MATCHED'.
- - Removed function 'final_rule()', functionality is now in
    'apply_final_rule()'.
- - Removed function 'comp_log_params()'.
* - Replaced config variable 'MODS_TO_LOAD' with config variable
    'MODULES_TO_LOAD', which uses the formating of rule array variables
    and now allows to add optional parameters for the module when loading.
* - Added two sub functions into 'validate_rule()' named 
    'rule_limit_processing()' and 'rule_logopt_processing()', in order to
    overtake the functionality of 'comp_log_params()'.
* - Made values, except for the interface, in local service rules optional.
* - Optimized code in 'cache_rule()'. Changed the functions parameters
    from f, m, n to filter, mangle, nat.
* - Renamed some functions, so they are named following the logic of the
    program more than they have been before.
    Renamed 'add_rule()' to 'validate_rule()', 'add_rule_common()' to
    'common_rule_processing()' and 'add_rule_common_ports' to
    'rule_ports_processing'.
    Renamed 'cache_rule()' to 'add_rule()'.
* - Minor modifications in 'validate_rule()'.
* - Minor modifications in the init script.
* - Minor improvements.

# -------------------------------------------------------------------------
0.05.69
+ - Added MASQUERADE target.
* - Minor modifications in 'add_rule()'.

# -------------------------------------------------------------------------
0.05.68
! - Fixed a bug in 'inet_to_dmz_allow()', where a wrong parameter for
    add_rule was used.
! - Fixed a bug in 'val_ifname()', where interface specifications with
    a '+' at the end were not correctly validated.
* - Renamed function 'increase_ttl()' to 'set_ttl()'.
* - Added function 'val_ttl()' to validate user defined TTL values are in
    the correct range.
* - Renamed function 'val_target()' to 'val_policy_target()' and modified
    it to only check for valid policy targets.
* - Minor modifications on functions 'start_msg()', 'add_rule()' and
    'get_prog_paths()'.

# -------------------------------------------------------------------------
0.05.67
+ - Expanded the possiblillities of the TTL target manipulation. It's now
    possible to selectively increase, decrease or set TTL by a specific
    value. Renamed configuration option 'INC_TTL' to 'SET_TTL'. Renamed
    rules configuration variable 'INC_TTL_NETS' to 'SET_TTL_NETS'.
+ - Added configuration opion 'RULE_PLACEHOLDER'. This makes the rule
    placeholder for the rules configuration file a user definable variable. 

# -------------------------------------------------------------------------
0.05.66
! - Fixed a bug, where a wrong exit status was reported to the init script
    after loading the main IP-Array script.
* - Compacted the code in 'add_rule()' by calling getops only once.

# -------------------------------------------------------------------------
0.05.65
! - Fixed a bug in 'add_rule()', where negated iprange values were not
    properly processed.
! - Fixed a bug in 'fill_array()'. If all entries of a rule variable are
    spaces or comments, the original variable would be preserved and
    carried on, resulting in an invalid rule strings.
* - Optimized 'ev_rule_arg()' to also set the messages to display.
* - Adapted 'add_rule()' to always use 'ev_rule_arg()' to compile the
    command strings, when it makes sense.

# -------------------------------------------------------------------------
0.05.64
+ - Added configuration option 'ENABLE_SYSLOG' to enable or disable
    syslog logging.
+ - Added configuration option 'ENABLE_COLORS' to enable or disable
    coloured output.
* - Minor modififications on the look of the output. Adapted 'start_msg()'.

# -------------------------------------------------------------------------
0.05.63
! - Fixed a bug concerning handling of local variables.
* - Rewrote function 'auto_get_progs()'. Added 'check_prog()' and removed
    the functions which became unnecessary.
* - Rewrote functions 'val_port()', 'val_proto()' and parts of
    'comp_log_param()'.

# -------------------------------------------------------------------------
0.05.62
* - Rewrote 'fill_array()' function to use builtins and to check for empty
    variables and/or entries. Which allowed to remove the checks from the
    calling functions.
+ - Added more detailed output to some functions.

# -------------------------------------------------------------------------
0.05.61
* - Made more rule entries in 'rules.cfg' optional values, which allows
    more 'loose' rules and shorter rule entries. Also rearranged the
    configuration format of many rule variables, which allows shorter
    rule entries, as more values become optional.

# -------------------------------------------------------------------------
0.05.60
- - Code cleanup (speed improvement).
* - Minor improvements.

# -------------------------------------------------------------------------
0.05.59
+ - Added iprange match for all source / destination config entries.
* - Rewrote 'val_numeric()', 'val_ip4_addr()', 'val_mac()'.
* - State match in user rules will now also be applied, for other protocols
    then tcp or udp.
* - Checking for mandatory variables in rule arrays is now done using the
    'check_vars()' function.

# -------------------------------------------------------------------------
0.05.58
! - Fixed a bug in 'proc_dual()', where only the first configured
    'interface:value' setting was correctly checked. 

# -------------------------------------------------------------------------
0.05.57
! - Fixed a logical bug, concerning prioryzing of SYN packets.
+ - Added checking for ACCEPT policy in OUTPUT chain.

# -------------------------------------------------------------------------
0.05.56
* - Changed how multiple local variables were defined.
* - Minor improvements.

# -------------------------------------------------------------------------
0.05.55
! - Fixed a bug in file 'bad_tcp_packets', where checks if variables
    'LOG_ILLEGAL' and 'BLOCK_ILLEGAL' are '1' were missing.

# -------------------------------------------------------------------------
0.05.54
! - Fixed a bug in 'add_rule()', where TOS marks were not returned.
! - Fixed a bug in 'proc_dual()', where empty variables caused an error
    message.
! - Fixed a bug when starting IP-Array with tc-start, where network
    interface enumeration was not performed.

# -------------------------------------------------------------------------
0.05.53
! - Fixed a bug in 'val_mac()', where regex was [a-Z] not [A-Z].
! - Fixed a bug in 'inet_to_dmz_allow()' and 'dmz_to_inet_allow()', where
    the messages displayed were interchanged.
* - Reworked NAT functions:
    Removed 'SNAT_SIMPLE'. Renamed 'SNAT_DETAIL' to 'SNAT_POSTROUTING'.
    Made 'SNAT_POSTROUTING' more flexible, so that not only tcp or udp
    can be processed.
    Optimized function 'val_nat_port()'.

# -------------------------------------------------------------------------
0.05.52
+ - Added function 'fill_net_arrays()', now user defined network arrays
    are filled from normal variables, just like rule arrays.
+ - Added config option 'AUTO_GET_PROGS' and functions 'which_prog()',
    'get_prog_paths()'.
+ - Added 'tc_err_count' to count traffic shaping rule apply errors.
! - Fixed a bug in 'inet_to_dmz_allow()', where input and output
    interfaces were interchanged.

# -------------------------------------------------------------------------
0.05.51
+ - Added logging of actions taken to the following functions:
    'log_fragments()', 'drop_fragments()', 'log_invalid()', 'drop_invalid()'
    'log_illegal()', 'drop_illegal()'.
+ - Added redirection of error and warning messages to StdErr.
+ - Added more documentation in the fw.cfg, rules.cfg and README.

# -------------------------------------------------------------------------
0.05.50
! - Fixed a bug in 'tc_add_class()', where the same parameter was used
    twice.
! - Fixed a bug in 'add_rule()', where I somehow missed to add the RETURN
    jumps after marking packets, while rewriting the function for v.0.05.31.
* - Moved custom variables from config file 'local' to new file 'aliases'.
* - Minor optimizations in some of the rules files.
* - Changed functions, which used to set parameters by setting a local IFS,
    to use 'split_val()' instead.
* - Changed 'val_numeric()' to use builtins instead of grep, which
    speeds up rules processing a lot.
* - Made mac address in 'LAN_NS' array an optional value.
+ - Added 'burst' option to 'tc_add_class()' and 'tc_create_class()'.
+ - Added function 'val_icmp_type()', to validate icmp type/code values.
+ - Added functions 'val_tc_unit()' and 'val_tc_bw_val()' to validate
    rate, ceil and burst options when creating tc classes.

# -------------------------------------------------------------------------
0.05.49
+ - Added multiple NAT sources and NAT ports to NAT part of 'add_rule()'.
    Added checking for negated NAT source or destination IP.
! - Fixed a typo: 'PROC_IP_FORWARD' is now correctly spelled in main config
    and the script.
+ - Added validation of limit, burst and log options in 'comp_log_param()'.

# -------------------------------------------------------------------------
0.05.48
! - Fixed a bug in 'comp_log_param()', where logging options were not 
    correctly set. Changed it to use the 'getopts' builtin and adapted
    according functions.
! - Fixed a bug in 'add_rule()', where negated icmp types where logged
    showing up not negated.
+ - Added support for multiple external and ipsec interfaces to rules
    file 'ipsec'.
+ - Added support for multiple ipsec interfaces to the following functions:
    'vpn_input_allow()', 'vpn_output_allow()', 'vpn_input_block()',
    'vpn_ouput_block()'.
+ - Added checking for two equal interfaces when forwarding in
    'add_rule_common()'.

# -------------------------------------------------------------------------
0.05.47
* - Merged content of 'functions' file into main script.
+ - Added function 'get_route_iface()', adapted 'intns_to_extns()' to get
    the correct output interface when applying rules for root nameservers.
* - Modified '-i' parameter of 'log()' to display the bad value. Adapted
    according functions.

# -------------------------------------------------------------------------
0.05.46
+ - Added support for multiple external interfaces to these functions:
    'app_allow_wmp()', 'app_allow_wmp()', 'lan_ftp()', 'allow_out_dns()',
    'allow_out_ntp()'.

# -------------------------------------------------------------------------
0.05.45
+ - Added support for multiple external interfaces to these functions:
    'mark_out_bulk()', 'mark_fwd_bulk()'.
+ - Added logging of actions taken to 'mark_prio_syn()', 'mark_out_bulk()'
    and 'mark_fwd_bulk()'.

# -------------------------------------------------------------------------
0.05.44
+ - Added support for multiple external interfaces to these functions:
    'increase_ttl()', 'set_tcpmss_to_mtu()', 'lan_to_inet_allow()', 
    'dmz_to_inet_allow()', 'inet_to_dmz_allow()'.
* - Minor optimizations in 'vpn_all_branch_allow()'.

# -------------------------------------------------------------------------
0.05.43
+ - Added function 'create_chain()' to handle creation of chains.
* - Changed the handling of 'ipsec' chain. It will be created if needed.
* - Made 'lan_isp_smtp()' and 'intns_to_extns()' work with multiple external
    interfaces.

# -------------------------------------------------------------------------
0.05.42
* - Changed 'log' rule file. 'bad_tcp_packets' chain will be created if needed.
* - Changed the handling of the 'limbo' chain. It will be created if needed.
! - Fixed a bug in all rule functions reading user config, where if tcp or
    udp were negated, the entry was processed like other protocols.
! - Fixed a logic error in 'add_rule_common()'. All rules using interface
    aliases (partly_ifname+) and negated values (!ifname) had the target
    chain set to FORWARD.
+ - Added function 'fill_array()'. It replaces all the variable to array
    transform code in the rules functions.
* - Code cosmetics / minor optimizations.

# -------------------------------------------------------------------------
0.05.41
+ - Added function 'validate_net_config()', to validate network config.
+ - Added checking for lsmod and rmmod.
* - Changed 'load_mods()'. Now does not quit immediately on the first error.
* - Changed quoting in most functions, removed the unnecessary ones.

# -------------------------------------------------------------------------
0.05.40
* - Changed main configuration file structure.
* - Changed interface validation in some functions from 'val_ifname()' to
    'check_iface()', which is the correct and faster check.
+ - Added 'tc-start' and 'tc-stop' arguments to the IP-Array init script.
+ - Added 'CONFIG_FILES' variable to the main config file.
+ - Added 'AUTO_ISP_SMTP' option, which automatically configures LANs to
    internet SMTP server rules.

# -------------------------------------------------------------------------
0.05.39
* - Changed the interface enumeration / configuration shema to be prepared
    for multiple external interfaces.
* - Renamed 'intns_to_provns()' to 'intns_to_extns()' and adapted it to
    use the new configuration shema.
* - Changed 'enumerate_if_data()', now creates interface lists and arrays
    for external, lan and dmz.
* - Merged those sysctl settings, which are set to a specific value,
    into one function 'proc_fixed()'.
* - Changed 'check_vars()' to use the 'eval' builtin.
* - Changed the logging/dropping of portscans, all functions merged into one.
    For each scan type logging and dropping can be activated individually in
    the main configuration file.
* - Changed the unsetting of multiple global variables to: unset var1 var2 varN.
* - Code cosmetics / minor optimizations.

# -------------------------------------------------------------------------
0.05.38
- - Removed '-n' and '-w' parameters from 'log()'.
+ - Added previously missed error logging to icmp logging functions.
* - Code cosmetics / minor optimizations.

# -------------------------------------------------------------------------
0.05.37
! - Fixed some minor bugs, where incorrect logging was performed.
+ - Added rules apply error count.
+ - Added config entry error count.
* - Changed the logging of iptables and rule errors.
* - Changed tcp/udp rule processing: sport, dport and state no longer mandatory.

# -------------------------------------------------------------------------
0.05.36
! - Fixed a minor bug in 'get_if_data()'.
* - Merged all of the sysctl 0/1 settings into one function 'proc_dual()'.
* - Changed 'enumerate_if_data()', to load data from an array.
+ - Added application presets for 'Windows Media-' and 'Real Player'.
* - Code cosmetics / minor optimizations.

# -------------------------------------------------------------------------
0.05.35
+ - Added start parameter 'open', modified the 'stop' behaviour.
+ - Added TTL increase value to be user defined.

# -------------------------------------------------------------------------
0.05.34
+ - Added checking for iptables targets.
+ - Added checking for iptables match modules.
+ - Added dropping of UPNP broadcasts.

# -------------------------------------------------------------------------
0.05.33

+ - Added global log options to the bad packets functions.
+ - Added checking for /etc/protocols and /etc/services.
+ - Added checking for modprobe.
* - Code cosmetics / minor optimizations.
- - Removed one unnecessary rule from DROP_DHCP.

# -------------------------------------------------------------------------
0.05.32

! - Fixed some typos in some functions logging part.
+ - Added prolog and epilog scripts.

# -------------------------------------------------------------------------
0.05.31

! - Fixed a bug in 'add_rule()', where nat rules were not applied on the
    correct interface.
! - Fixed little typos in the rules.cfg.
+ - Added config option 'REST_ALLOW_RELATED'.
* - Made the 'drop netbios' and 'reject auth' statements more precise. 
+ - Added little more documentation in the fw.cfg and README.

# -------------------------------------------------------------------------
0.05.30

-: Initial public release.
